name: Daily Commit Summary

# Security: This workflow uses GitHub Secrets for sensitive data
# - OPENAI_API_KEY: Never logged or exposed
# - WEBHOOK_URL: Masked in all outputs
# All sensitive data is masked using ::add-mask:: directive
# Error messages are sanitized to prevent key leakage

on:
  schedule:
    # Runs at 8:45 AM PT (15:45 UTC) Monday-Friday
    - cron: "45 15 * * 1-5"
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  summarize:
    runs-on: ubuntu-latest
    timeout-minutes: 10 # Prevent hanging jobs
    
    # Security: Disable debug logging to prevent secret exposure
    env:
      ACTIONS_STEP_DEBUG: false
      ACTIONS_RUNNER_DEBUG: false
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate log
          
      - name: Make scripts executable
        run: |
          chmod +x .github/scripts/*.sh
          echo "‚úÖ Scripts permissions set"
          
      - name: Security initialization
        run: |
          source .github/scripts/common.sh
          init_security
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          echo "‚úÖ Dependencies installed"
          
      - name: Fetch commits from repositories
        id: fetch
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: |
          echo "üîç Starting commit collection..."
          .github/scripts/fetch-commits.sh
          
          # Read the results
          if [ -f /tmp/commits_data.json ]; then
            COMMIT_COUNT=$(jq -r '.commit_count' /tmp/commits_data.json)
            REPO_COUNT=$(jq -r '.repo_count' /tmp/commits_data.json)
            TODAY=$(jq -r '.today' /tmp/commits_data.json)
            
            echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_OUTPUT
            echo "REPO_COUNT=$REPO_COUNT" >> $GITHUB_OUTPUT
            echo "TODAY=$TODAY" >> $GITHUB_OUTPUT
            echo "‚úÖ Found $COMMIT_COUNT commits across $REPO_COUNT repositories"
          else
            echo "‚ùå Failed to fetch commits"
            exit 1
          fi
          
      - name: Generate AI summary
        id: summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "ü§ñ Generating AI summary..."
          .github/scripts/generate-summary.sh
          
          # Read the results
          if [ -f /tmp/summary_data.json ]; then
            SUMMARY=$(jq -r '.summary' /tmp/summary_data.json)
            SKIP_WEBHOOK=$(jq -r '.skip_webhook' /tmp/summary_data.json)
            
            # Save outputs using new syntax
            echo "SUMMARY<<EOF" >> $GITHUB_OUTPUT
            echo "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "SKIP_WEBHOOK=$SKIP_WEBHOOK" >> $GITHUB_OUTPUT
            echo "‚úÖ Summary generated successfully"
          else
            echo "‚ùå Failed to generate summary"
            exit 1
          fi
          
      - name: Send to webhook
        if: steps.summary.outputs.SKIP_WEBHOOK != 'true'
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          echo "üì§ Sending summary to webhook..."
          .github/scripts/send-webhook.sh
          
      - name: Job summary
        if: always()
        run: |
          echo "## üìä Daily Commit Summary Job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.summary.outputs.SKIP_WEBHOOK }}" == "true" ]; then
            echo "‚ÑπÔ∏è No commits to summarize" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Summary Generated:" >> $GITHUB_STEP_SUMMARY
            echo "**Repositories checked:** ${{ steps.fetch.outputs.REPO_COUNT }}" >> $GITHUB_STEP_SUMMARY
            echo "**Commits found:** ${{ steps.fetch.outputs.COMMIT_COUNT }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Security: Only show the generated summary, no API responses or keys
            SAFE_SUMMARY="${{ steps.summary.outputs.SUMMARY }}"
            # Additional sanitization: Remove any potential leaked keys
            SAFE_SUMMARY=$(echo "$SAFE_SUMMARY" | sed 's/sk-[a-zA-Z0-9]*/**REDACTED**/g' | sed 's/[a-fA-F0-9]{32,}/**KEY**/g')
            
            # Add production status indicators
            echo "**Status:** ‚úÖ Production Ready" >> $GITHUB_STEP_SUMMARY
            echo "**API Provider:** OpenAI GPT-4o-mini" >> $GITHUB_STEP_SUMMARY
            echo "**Webhook Format:** Microsoft Teams AdaptiveCard" >> $GITHUB_STEP_SUMMARY
            echo "$SAFE_SUMMARY" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run time:** $(date -u +%Y-%m-%d\ %H:%M:%S) UTC" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Security: All sensitive data masked" >> $GITHUB_STEP_SUMMARY